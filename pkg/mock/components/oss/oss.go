// Code generated by MockGen. DO NOT EDIT.
// Source: oss.go

// Package mock_oss is a generated GoMock package.
package mock_oss

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	file "mosn.io/layotto/components/file"
)

// MockOss is a mock of Oss interface.
type MockOss struct {
	ctrl     *gomock.Controller
	recorder *MockOssMockRecorder
}

// MockOssMockRecorder is the mock recorder for MockOss.
type MockOssMockRecorder struct {
	mock *MockOss
}

// NewMockOss creates a new mock instance.
func NewMockOss(ctrl *gomock.Controller) *MockOss {
	mock := &MockOss{ctrl: ctrl}
	mock.recorder = &MockOssMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOss) EXPECT() *MockOssMockRecorder {
	return m.recorder
}

// AbortMultipartUpload mocks base method.
func (m *MockOss) AbortMultipartUpload(arg0 context.Context, arg1 *file.AbortMultipartUploadInput) (*file.AbortMultipartUploadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortMultipartUpload", arg0, arg1)
	ret0, _ := ret[0].(*file.AbortMultipartUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AbortMultipartUpload indicates an expected call of AbortMultipartUpload.
func (mr *MockOssMockRecorder) AbortMultipartUpload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortMultipartUpload", reflect.TypeOf((*MockOss)(nil).AbortMultipartUpload), arg0, arg1)
}

// AppendObject mocks base method.
func (m *MockOss) AppendObject(arg0 context.Context, arg1 *file.AppendObjectInput) (*file.AppendObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendObject", arg0, arg1)
	ret0, _ := ret[0].(*file.AppendObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendObject indicates an expected call of AppendObject.
func (mr *MockOssMockRecorder) AppendObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendObject", reflect.TypeOf((*MockOss)(nil).AppendObject), arg0, arg1)
}

// CompleteMultipartUpload mocks base method.
func (m *MockOss) CompleteMultipartUpload(arg0 context.Context, arg1 *file.CompleteMultipartUploadInput) (*file.CompleteMultipartUploadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteMultipartUpload", arg0, arg1)
	ret0, _ := ret[0].(*file.CompleteMultipartUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteMultipartUpload indicates an expected call of CompleteMultipartUpload.
func (mr *MockOssMockRecorder) CompleteMultipartUpload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteMultipartUpload", reflect.TypeOf((*MockOss)(nil).CompleteMultipartUpload), arg0, arg1)
}

// CopyObject mocks base method.
func (m *MockOss) CopyObject(arg0 context.Context, arg1 *file.CopyObjectInput) (*file.CopyObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyObject", arg0, arg1)
	ret0, _ := ret[0].(*file.CopyObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyObject indicates an expected call of CopyObject.
func (mr *MockOssMockRecorder) CopyObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyObject", reflect.TypeOf((*MockOss)(nil).CopyObject), arg0, arg1)
}

// CreateMultipartUpload mocks base method.
func (m *MockOss) CreateMultipartUpload(arg0 context.Context, arg1 *file.CreateMultipartUploadInput) (*file.CreateMultipartUploadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultipartUpload", arg0, arg1)
	ret0, _ := ret[0].(*file.CreateMultipartUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMultipartUpload indicates an expected call of CreateMultipartUpload.
func (mr *MockOssMockRecorder) CreateMultipartUpload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultipartUpload", reflect.TypeOf((*MockOss)(nil).CreateMultipartUpload), arg0, arg1)
}

// DeleteObject mocks base method.
func (m *MockOss) DeleteObject(arg0 context.Context, arg1 *file.DeleteObjectInput) (*file.DeleteObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", arg0, arg1)
	ret0, _ := ret[0].(*file.DeleteObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockOssMockRecorder) DeleteObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockOss)(nil).DeleteObject), arg0, arg1)
}

// DeleteObjectTagging mocks base method.
func (m *MockOss) DeleteObjectTagging(arg0 context.Context, arg1 *file.DeleteObjectTaggingInput) (*file.DeleteObjectTaggingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectTagging", arg0, arg1)
	ret0, _ := ret[0].(*file.DeleteObjectTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObjectTagging indicates an expected call of DeleteObjectTagging.
func (mr *MockOssMockRecorder) DeleteObjectTagging(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectTagging", reflect.TypeOf((*MockOss)(nil).DeleteObjectTagging), arg0, arg1)
}

// DeleteObjects mocks base method.
func (m *MockOss) DeleteObjects(arg0 context.Context, arg1 *file.DeleteObjectsInput) (*file.DeleteObjectsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjects", arg0, arg1)
	ret0, _ := ret[0].(*file.DeleteObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObjects indicates an expected call of DeleteObjects.
func (mr *MockOssMockRecorder) DeleteObjects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjects", reflect.TypeOf((*MockOss)(nil).DeleteObjects), arg0, arg1)
}

// GetObject mocks base method.
func (m *MockOss) GetObject(arg0 context.Context, arg1 *file.GetObjectInput) (*file.GetObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", arg0, arg1)
	ret0, _ := ret[0].(*file.GetObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockOssMockRecorder) GetObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockOss)(nil).GetObject), arg0, arg1)
}

// GetObjectCannedAcl mocks base method.
func (m *MockOss) GetObjectCannedAcl(arg0 context.Context, arg1 *file.GetObjectCannedAclInput) (*file.GetObjectCannedAclOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectCannedAcl", arg0, arg1)
	ret0, _ := ret[0].(*file.GetObjectCannedAclOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectCannedAcl indicates an expected call of GetObjectCannedAcl.
func (mr *MockOssMockRecorder) GetObjectCannedAcl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectCannedAcl", reflect.TypeOf((*MockOss)(nil).GetObjectCannedAcl), arg0, arg1)
}

// GetObjectTagging mocks base method.
func (m *MockOss) GetObjectTagging(arg0 context.Context, arg1 *file.GetObjectTaggingInput) (*file.GetObjectTaggingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectTagging", arg0, arg1)
	ret0, _ := ret[0].(*file.GetObjectTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectTagging indicates an expected call of GetObjectTagging.
func (mr *MockOssMockRecorder) GetObjectTagging(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectTagging", reflect.TypeOf((*MockOss)(nil).GetObjectTagging), arg0, arg1)
}

// HeadObject mocks base method.
func (m *MockOss) HeadObject(arg0 context.Context, arg1 *file.HeadObjectInput) (*file.HeadObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadObject", arg0, arg1)
	ret0, _ := ret[0].(*file.HeadObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadObject indicates an expected call of HeadObject.
func (mr *MockOssMockRecorder) HeadObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadObject", reflect.TypeOf((*MockOss)(nil).HeadObject), arg0, arg1)
}

// InitClient mocks base method.
func (m *MockOss) InitClient(arg0 context.Context, arg1 *file.InitRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitClient", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitClient indicates an expected call of InitClient.
func (mr *MockOssMockRecorder) InitClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitClient", reflect.TypeOf((*MockOss)(nil).InitClient), arg0, arg1)
}

// InitConfig mocks base method.
func (m *MockOss) InitConfig(arg0 context.Context, arg1 *file.FileConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitConfig indicates an expected call of InitConfig.
func (mr *MockOssMockRecorder) InitConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitConfig", reflect.TypeOf((*MockOss)(nil).InitConfig), arg0, arg1)
}

// IsObjectExist mocks base method.
func (m *MockOss) IsObjectExist(arg0 context.Context, arg1 *file.IsObjectExistInput) (*file.IsObjectExistOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsObjectExist", arg0, arg1)
	ret0, _ := ret[0].(*file.IsObjectExistOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsObjectExist indicates an expected call of IsObjectExist.
func (mr *MockOssMockRecorder) IsObjectExist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsObjectExist", reflect.TypeOf((*MockOss)(nil).IsObjectExist), arg0, arg1)
}

// ListMultipartUploads mocks base method.
func (m *MockOss) ListMultipartUploads(arg0 context.Context, arg1 *file.ListMultipartUploadsInput) (*file.ListMultipartUploadsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMultipartUploads", arg0, arg1)
	ret0, _ := ret[0].(*file.ListMultipartUploadsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMultipartUploads indicates an expected call of ListMultipartUploads.
func (mr *MockOssMockRecorder) ListMultipartUploads(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMultipartUploads", reflect.TypeOf((*MockOss)(nil).ListMultipartUploads), arg0, arg1)
}

// ListObjectVersions mocks base method.
func (m *MockOss) ListObjectVersions(arg0 context.Context, arg1 *file.ListObjectVersionsInput) (*file.ListObjectVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectVersions", arg0, arg1)
	ret0, _ := ret[0].(*file.ListObjectVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectVersions indicates an expected call of ListObjectVersions.
func (mr *MockOssMockRecorder) ListObjectVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectVersions", reflect.TypeOf((*MockOss)(nil).ListObjectVersions), arg0, arg1)
}

// ListObjects mocks base method.
func (m *MockOss) ListObjects(arg0 context.Context, arg1 *file.ListObjectsInput) (*file.ListObjectsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjects", arg0, arg1)
	ret0, _ := ret[0].(*file.ListObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjects indicates an expected call of ListObjects.
func (mr *MockOssMockRecorder) ListObjects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjects", reflect.TypeOf((*MockOss)(nil).ListObjects), arg0, arg1)
}

// ListParts mocks base method.
func (m *MockOss) ListParts(arg0 context.Context, arg1 *file.ListPartsInput) (*file.ListPartsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListParts", arg0, arg1)
	ret0, _ := ret[0].(*file.ListPartsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListParts indicates an expected call of ListParts.
func (mr *MockOssMockRecorder) ListParts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParts", reflect.TypeOf((*MockOss)(nil).ListParts), arg0, arg1)
}

// PutObject mocks base method.
func (m *MockOss) PutObject(arg0 context.Context, arg1 *file.PutObjectInput) (*file.PutObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObject", arg0, arg1)
	ret0, _ := ret[0].(*file.PutObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject.
func (mr *MockOssMockRecorder) PutObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockOss)(nil).PutObject), arg0, arg1)
}

// PutObjectCannedAcl mocks base method.
func (m *MockOss) PutObjectCannedAcl(arg0 context.Context, arg1 *file.PutObjectCannedAclInput) (*file.PutObjectCannedAclOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObjectCannedAcl", arg0, arg1)
	ret0, _ := ret[0].(*file.PutObjectCannedAclOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObjectCannedAcl indicates an expected call of PutObjectCannedAcl.
func (mr *MockOssMockRecorder) PutObjectCannedAcl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObjectCannedAcl", reflect.TypeOf((*MockOss)(nil).PutObjectCannedAcl), arg0, arg1)
}

// PutObjectTagging mocks base method.
func (m *MockOss) PutObjectTagging(arg0 context.Context, arg1 *file.PutObjectTaggingInput) (*file.PutObjectTaggingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObjectTagging", arg0, arg1)
	ret0, _ := ret[0].(*file.PutObjectTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObjectTagging indicates an expected call of PutObjectTagging.
func (mr *MockOssMockRecorder) PutObjectTagging(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObjectTagging", reflect.TypeOf((*MockOss)(nil).PutObjectTagging), arg0, arg1)
}

// RestoreObject mocks base method.
func (m *MockOss) RestoreObject(arg0 context.Context, arg1 *file.RestoreObjectInput) (*file.RestoreObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreObject", arg0, arg1)
	ret0, _ := ret[0].(*file.RestoreObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreObject indicates an expected call of RestoreObject.
func (mr *MockOssMockRecorder) RestoreObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreObject", reflect.TypeOf((*MockOss)(nil).RestoreObject), arg0, arg1)
}

// SignURL mocks base method.
func (m *MockOss) SignURL(arg0 context.Context, arg1 *file.SignURLInput) (*file.SignURLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignURL", arg0, arg1)
	ret0, _ := ret[0].(*file.SignURLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignURL indicates an expected call of SignURL.
func (mr *MockOssMockRecorder) SignURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignURL", reflect.TypeOf((*MockOss)(nil).SignURL), arg0, arg1)
}

// UpdateDownLoadBandwidthRateLimit mocks base method.
func (m *MockOss) UpdateDownLoadBandwidthRateLimit(arg0 context.Context, arg1 *file.UpdateBandwidthRateLimitInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDownLoadBandwidthRateLimit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDownLoadBandwidthRateLimit indicates an expected call of UpdateDownLoadBandwidthRateLimit.
func (mr *MockOssMockRecorder) UpdateDownLoadBandwidthRateLimit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDownLoadBandwidthRateLimit", reflect.TypeOf((*MockOss)(nil).UpdateDownLoadBandwidthRateLimit), arg0, arg1)
}

// UpdateUpLoadBandwidthRateLimit mocks base method.
func (m *MockOss) UpdateUpLoadBandwidthRateLimit(arg0 context.Context, arg1 *file.UpdateBandwidthRateLimitInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUpLoadBandwidthRateLimit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUpLoadBandwidthRateLimit indicates an expected call of UpdateUpLoadBandwidthRateLimit.
func (mr *MockOssMockRecorder) UpdateUpLoadBandwidthRateLimit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUpLoadBandwidthRateLimit", reflect.TypeOf((*MockOss)(nil).UpdateUpLoadBandwidthRateLimit), arg0, arg1)
}

// UploadPart mocks base method.
func (m *MockOss) UploadPart(arg0 context.Context, arg1 *file.UploadPartInput) (*file.UploadPartOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadPart", arg0, arg1)
	ret0, _ := ret[0].(*file.UploadPartOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadPart indicates an expected call of UploadPart.
func (mr *MockOssMockRecorder) UploadPart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPart", reflect.TypeOf((*MockOss)(nil).UploadPart), arg0, arg1)
}

// UploadPartCopy mocks base method.
func (m *MockOss) UploadPartCopy(arg0 context.Context, arg1 *file.UploadPartCopyInput) (*file.UploadPartCopyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadPartCopy", arg0, arg1)
	ret0, _ := ret[0].(*file.UploadPartCopyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadPartCopy indicates an expected call of UploadPartCopy.
func (mr *MockOssMockRecorder) UploadPartCopy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPartCopy", reflect.TypeOf((*MockOss)(nil).UploadPartCopy), arg0, arg1)
}
