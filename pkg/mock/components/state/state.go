// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dapr/components-contrib/state (interfaces: Store,TransactionalStore)

// Package mock_state is a generated GoMock package.
package mock_state

import (
	context "context"
	reflect "reflect"

	metadata "github.com/dapr/components-contrib/metadata"
	state "github.com/dapr/components-contrib/state"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// BulkDelete mocks base method.
func (m *MockStore) BulkDelete(ctx context.Context, req []state.DeleteRequest, opts state.BulkStoreOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDelete", ctx, req, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkDelete indicates an expected call of BulkDelete.
func (mr *MockStoreMockRecorder) BulkDelete(ctx, req, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDelete", reflect.TypeOf((*MockStore)(nil).BulkDelete), ctx, req, opts)
}

// BulkGet mocks base method.
func (m *MockStore) BulkGet(ctx context.Context, req []state.GetRequest, opts state.BulkGetOpts) ([]state.BulkGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkGet", ctx, req, opts)
	ret0, _ := ret[0].([]state.BulkGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkGet indicates an expected call of BulkGet.
func (mr *MockStoreMockRecorder) BulkGet(ctx, req, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkGet", reflect.TypeOf((*MockStore)(nil).BulkGet), ctx, req, opts)
}

// BulkSet mocks base method.
func (m *MockStore) BulkSet(ctx context.Context, req []state.SetRequest, opts state.BulkStoreOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkSet", ctx, req, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkSet indicates an expected call of BulkSet.
func (mr *MockStoreMockRecorder) BulkSet(ctx, req, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkSet", reflect.TypeOf((*MockStore)(nil).BulkSet), ctx, req, opts)
}

// Delete mocks base method.
func (m *MockStore) Delete(ctx context.Context, req *state.DeleteRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStoreMockRecorder) Delete(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStore)(nil).Delete), ctx, req)
}

// Features mocks base method.
func (m *MockStore) Features() []state.Feature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Features")
	ret0, _ := ret[0].([]state.Feature)
	return ret0
}

// Features indicates an expected call of Features.
func (mr *MockStoreMockRecorder) Features() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features", reflect.TypeOf((*MockStore)(nil).Features))
}

// Get mocks base method.
func (m *MockStore) Get(ctx context.Context, req *state.GetRequest) (*state.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, req)
	ret0, _ := ret[0].(*state.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStoreMockRecorder) Get(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStore)(nil).Get), ctx, req)
}

// GetComponentMetadata mocks base method.
func (m *MockStore) GetComponentMetadata() metadata.MetadataMap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentMetadata")
	ret0, _ := ret[0].(metadata.MetadataMap)
	return ret0
}

// GetComponentMetadata indicates an expected call of GetComponentMetadata.
func (mr *MockStoreMockRecorder) GetComponentMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentMetadata", reflect.TypeOf((*MockStore)(nil).GetComponentMetadata))
}

// Init mocks base method.
func (m *MockStore) Init(ctx context.Context, metadata state.Metadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockStoreMockRecorder) Init(ctx, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockStore)(nil).Init), ctx, metadata)
}

// Set mocks base method.
func (m *MockStore) Set(ctx context.Context, req *state.SetRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockStoreMockRecorder) Set(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStore)(nil).Set), ctx, req)
}

// MockTransactionalStore is a mock of TransactionalStore interface.
type MockTransactionalStore struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionalStoreMockRecorder
}

// MockTransactionalStoreMockRecorder is the mock recorder for MockTransactionalStore.
type MockTransactionalStoreMockRecorder struct {
	mock *MockTransactionalStore
}

// NewMockTransactionalStore creates a new mock instance.
func NewMockTransactionalStore(ctrl *gomock.Controller) *MockTransactionalStore {
	mock := &MockTransactionalStore{ctrl: ctrl}
	mock.recorder = &MockTransactionalStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionalStore) EXPECT() *MockTransactionalStoreMockRecorder {
	return m.recorder
}

// Multi mocks base method.
func (m *MockTransactionalStore) Multi(ctx context.Context, request *state.TransactionalStateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Multi", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Multi indicates an expected call of Multi.
func (mr *MockTransactionalStoreMockRecorder) Multi(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Multi", reflect.TypeOf((*MockTransactionalStore)(nil).Multi), ctx, request)
}
