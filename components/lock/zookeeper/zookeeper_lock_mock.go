// Code generated by MockGen. DO NOT EDIT.
// Source: zookeeper_lock.go

// Package zookeeper is a generated GoMock package.
package zookeeper

import (
	reflect "reflect"
	time "time"

	zk "github.com/go-zookeeper/zk"
	gomock "github.com/golang/mock/gomock"
)

// MockConnectionFactory is a mock of ConnectionFactory interface.
type MockConnectionFactory struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionFactoryMockRecorder
}

// MockConnectionFactoryMockRecorder is the mock recorder for MockConnectionFactory.
type MockConnectionFactoryMockRecorder struct {
	mock *MockConnectionFactory
}

// NewMockConnectionFactory creates a new mock instance.
func NewMockConnectionFactory(ctrl *gomock.Controller) *MockConnectionFactory {
	mock := &MockConnectionFactory{ctrl: ctrl}
	mock.recorder = &MockConnectionFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionFactory) EXPECT() *MockConnectionFactoryMockRecorder {
	return m.recorder
}

// NewConnection mocks base method.
func (m *MockConnectionFactory) NewConnection(expire time.Duration, meta metadata) (ZKConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewConnection", expire, meta)
	ret0, _ := ret[0].(ZKConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewConnection indicates an expected call of NewConnection.
func (mr *MockConnectionFactoryMockRecorder) NewConnection(expire, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewConnection", reflect.TypeOf((*MockConnectionFactory)(nil).NewConnection), expire, meta)
}

// MockZKConnection is a mock of ZKConnection interface.
type MockZKConnection struct {
	ctrl     *gomock.Controller
	recorder *MockZKConnectionMockRecorder
}

// MockZKConnectionMockRecorder is the mock recorder for MockZKConnection.
type MockZKConnectionMockRecorder struct {
	mock *MockZKConnection
}

// NewMockZKConnection creates a new mock instance.
func NewMockZKConnection(ctrl *gomock.Controller) *MockZKConnection {
	mock := &MockZKConnection{ctrl: ctrl}
	mock.recorder = &MockZKConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZKConnection) EXPECT() *MockZKConnectionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockZKConnection) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockZKConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockZKConnection)(nil).Close))
}

// Create mocks base method.
func (m *MockZKConnection) Create(path string, data []byte, flags int32, acl []zk.ACL) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", path, data, flags, acl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockZKConnectionMockRecorder) Create(path, data, flags, acl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockZKConnection)(nil).Create), path, data, flags, acl)
}

// Delete mocks base method.
func (m *MockZKConnection) Delete(path string, version int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", path, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockZKConnectionMockRecorder) Delete(path, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockZKConnection)(nil).Delete), path, version)
}

// Get mocks base method.
func (m *MockZKConnection) Get(path string) ([]byte, *zk.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*zk.Stat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockZKConnectionMockRecorder) Get(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockZKConnection)(nil).Get), path)
}
