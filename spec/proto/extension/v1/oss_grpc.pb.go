// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package s3

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ObjectStorageServiceClient is the client API for ObjectStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectStorageServiceClient interface {
	InitClient(ctx context.Context, in *InitInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PutObject(ctx context.Context, opts ...grpc.CallOption) (ObjectStorageService_PutObjectClient, error)
	GetObject(ctx context.Context, in *GetObjectInput, opts ...grpc.CallOption) (ObjectStorageService_GetObjectClient, error)
	DeleteObject(ctx context.Context, in *DeleteObjectInput, opts ...grpc.CallOption) (*DeleteObjectOutput, error)
	PutObjectTagging(ctx context.Context, in *PutObjectTaggingInput, opts ...grpc.CallOption) (*PutObjectTaggingOutput, error)
	DeleteObjectTagging(ctx context.Context, in *DeleteObjectTaggingInput, opts ...grpc.CallOption) (*DeleteObjectTaggingOutput, error)
	GetObjectTagging(ctx context.Context, in *GetObjectTaggingInput, opts ...grpc.CallOption) (*GetObjectTaggingOutput, error)
	CopyObject(ctx context.Context, in *CopyObjectInput, opts ...grpc.CallOption) (*CopyObjectOutput, error)
	DeleteObjects(ctx context.Context, in *DeleteObjectsInput, opts ...grpc.CallOption) (*DeleteObjectsOutput, error)
	ListObjects(ctx context.Context, in *ListObjectsInput, opts ...grpc.CallOption) (*ListObjectsOutput, error)
	GetObjectAcl(ctx context.Context, in *GetObjectAclInput, opts ...grpc.CallOption) (*GetObjectAclOutput, error)
	PutObjectAcl(ctx context.Context, in *PutObjectAclInput, opts ...grpc.CallOption) (*PutObjectAclOutput, error)
	RestoreObject(ctx context.Context, in *RestoreObjectInput, opts ...grpc.CallOption) (*RestoreObjectOutput, error)
	CreateMultipartUpload(ctx context.Context, in *CreateMultipartUploadInput, opts ...grpc.CallOption) (*CreateMultipartUploadOutput, error)
	UploadPart(ctx context.Context, opts ...grpc.CallOption) (ObjectStorageService_UploadPartClient, error)
	UploadPartCopy(ctx context.Context, in *UploadPartCopyInput, opts ...grpc.CallOption) (*UploadPartCopyOutput, error)
	CompleteMultipartUpload(ctx context.Context, in *CompleteMultipartUploadInput, opts ...grpc.CallOption) (*CompleteMultipartUploadOutput, error)
	AbortMultipartUpload(ctx context.Context, in *AbortMultipartUploadInput, opts ...grpc.CallOption) (*AbortMultipartUploadOutput, error)
	ListMultipartUploads(ctx context.Context, in *ListMultipartUploadsInput, opts ...grpc.CallOption) (*ListMultipartUploadsOutput, error)
	ListObjectVersions(ctx context.Context, in *ListObjectVersionsInput, opts ...grpc.CallOption) (*ListObjectVersionsOutput, error)
	HeadObject(ctx context.Context, in *HeadObjectInput, opts ...grpc.CallOption) (*HeadObjectOutput, error)
	IsObjectExist(ctx context.Context, in *IsObjectExistInput, opts ...grpc.CallOption) (*IsObjectExistOutput, error)
	SignURL(ctx context.Context, in *SignURLInput, opts ...grpc.CallOption) (*SignURLOutput, error)
	UpdateDownLoadBandwidthRateLimit(ctx context.Context, in *UpdateBandwidthRateLimitInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateUpLoadBandwidthRateLimit(ctx context.Context, in *UpdateBandwidthRateLimitInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AppendObject(ctx context.Context, opts ...grpc.CallOption) (ObjectStorageService_AppendObjectClient, error)
	ListParts(ctx context.Context, in *ListPartsInput, opts ...grpc.CallOption) (*ListPartsOutput, error)
}

type objectStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectStorageServiceClient(cc grpc.ClientConnInterface) ObjectStorageServiceClient {
	return &objectStorageServiceClient{cc}
}

func (c *objectStorageServiceClient) InitClient(ctx context.Context, in *InitInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.ObjectStorageService/InitClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) PutObject(ctx context.Context, opts ...grpc.CallOption) (ObjectStorageService_PutObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObjectStorageService_ServiceDesc.Streams[0], "/spec.proto.extension.v1.ObjectStorageService/PutObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectStorageServicePutObjectClient{stream}
	return x, nil
}

type ObjectStorageService_PutObjectClient interface {
	Send(*PutObjectInput) error
	CloseAndRecv() (*PutObjectOutput, error)
	grpc.ClientStream
}

type objectStorageServicePutObjectClient struct {
	grpc.ClientStream
}

func (x *objectStorageServicePutObjectClient) Send(m *PutObjectInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *objectStorageServicePutObjectClient) CloseAndRecv() (*PutObjectOutput, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PutObjectOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectStorageServiceClient) GetObject(ctx context.Context, in *GetObjectInput, opts ...grpc.CallOption) (ObjectStorageService_GetObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObjectStorageService_ServiceDesc.Streams[1], "/spec.proto.extension.v1.ObjectStorageService/GetObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectStorageServiceGetObjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjectStorageService_GetObjectClient interface {
	Recv() (*GetObjectOutput, error)
	grpc.ClientStream
}

type objectStorageServiceGetObjectClient struct {
	grpc.ClientStream
}

func (x *objectStorageServiceGetObjectClient) Recv() (*GetObjectOutput, error) {
	m := new(GetObjectOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectStorageServiceClient) DeleteObject(ctx context.Context, in *DeleteObjectInput, opts ...grpc.CallOption) (*DeleteObjectOutput, error) {
	out := new(DeleteObjectOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.ObjectStorageService/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) PutObjectTagging(ctx context.Context, in *PutObjectTaggingInput, opts ...grpc.CallOption) (*PutObjectTaggingOutput, error) {
	out := new(PutObjectTaggingOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.ObjectStorageService/PutObjectTagging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) DeleteObjectTagging(ctx context.Context, in *DeleteObjectTaggingInput, opts ...grpc.CallOption) (*DeleteObjectTaggingOutput, error) {
	out := new(DeleteObjectTaggingOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.ObjectStorageService/DeleteObjectTagging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) GetObjectTagging(ctx context.Context, in *GetObjectTaggingInput, opts ...grpc.CallOption) (*GetObjectTaggingOutput, error) {
	out := new(GetObjectTaggingOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.ObjectStorageService/GetObjectTagging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) CopyObject(ctx context.Context, in *CopyObjectInput, opts ...grpc.CallOption) (*CopyObjectOutput, error) {
	out := new(CopyObjectOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.ObjectStorageService/CopyObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) DeleteObjects(ctx context.Context, in *DeleteObjectsInput, opts ...grpc.CallOption) (*DeleteObjectsOutput, error) {
	out := new(DeleteObjectsOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.ObjectStorageService/DeleteObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) ListObjects(ctx context.Context, in *ListObjectsInput, opts ...grpc.CallOption) (*ListObjectsOutput, error) {
	out := new(ListObjectsOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.ObjectStorageService/ListObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) GetObjectAcl(ctx context.Context, in *GetObjectAclInput, opts ...grpc.CallOption) (*GetObjectAclOutput, error) {
	out := new(GetObjectAclOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.ObjectStorageService/GetObjectAcl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) PutObjectAcl(ctx context.Context, in *PutObjectAclInput, opts ...grpc.CallOption) (*PutObjectAclOutput, error) {
	out := new(PutObjectAclOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.ObjectStorageService/PutObjectAcl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) RestoreObject(ctx context.Context, in *RestoreObjectInput, opts ...grpc.CallOption) (*RestoreObjectOutput, error) {
	out := new(RestoreObjectOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.ObjectStorageService/RestoreObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) CreateMultipartUpload(ctx context.Context, in *CreateMultipartUploadInput, opts ...grpc.CallOption) (*CreateMultipartUploadOutput, error) {
	out := new(CreateMultipartUploadOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.ObjectStorageService/CreateMultipartUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) UploadPart(ctx context.Context, opts ...grpc.CallOption) (ObjectStorageService_UploadPartClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObjectStorageService_ServiceDesc.Streams[2], "/spec.proto.extension.v1.ObjectStorageService/UploadPart", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectStorageServiceUploadPartClient{stream}
	return x, nil
}

type ObjectStorageService_UploadPartClient interface {
	Send(*UploadPartInput) error
	CloseAndRecv() (*UploadPartOutput, error)
	grpc.ClientStream
}

type objectStorageServiceUploadPartClient struct {
	grpc.ClientStream
}

func (x *objectStorageServiceUploadPartClient) Send(m *UploadPartInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *objectStorageServiceUploadPartClient) CloseAndRecv() (*UploadPartOutput, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadPartOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectStorageServiceClient) UploadPartCopy(ctx context.Context, in *UploadPartCopyInput, opts ...grpc.CallOption) (*UploadPartCopyOutput, error) {
	out := new(UploadPartCopyOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.ObjectStorageService/UploadPartCopy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) CompleteMultipartUpload(ctx context.Context, in *CompleteMultipartUploadInput, opts ...grpc.CallOption) (*CompleteMultipartUploadOutput, error) {
	out := new(CompleteMultipartUploadOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.ObjectStorageService/CompleteMultipartUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) AbortMultipartUpload(ctx context.Context, in *AbortMultipartUploadInput, opts ...grpc.CallOption) (*AbortMultipartUploadOutput, error) {
	out := new(AbortMultipartUploadOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.ObjectStorageService/AbortMultipartUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) ListMultipartUploads(ctx context.Context, in *ListMultipartUploadsInput, opts ...grpc.CallOption) (*ListMultipartUploadsOutput, error) {
	out := new(ListMultipartUploadsOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.ObjectStorageService/ListMultipartUploads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) ListObjectVersions(ctx context.Context, in *ListObjectVersionsInput, opts ...grpc.CallOption) (*ListObjectVersionsOutput, error) {
	out := new(ListObjectVersionsOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.ObjectStorageService/ListObjectVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) HeadObject(ctx context.Context, in *HeadObjectInput, opts ...grpc.CallOption) (*HeadObjectOutput, error) {
	out := new(HeadObjectOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.ObjectStorageService/HeadObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) IsObjectExist(ctx context.Context, in *IsObjectExistInput, opts ...grpc.CallOption) (*IsObjectExistOutput, error) {
	out := new(IsObjectExistOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.ObjectStorageService/IsObjectExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) SignURL(ctx context.Context, in *SignURLInput, opts ...grpc.CallOption) (*SignURLOutput, error) {
	out := new(SignURLOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.ObjectStorageService/SignURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) UpdateDownLoadBandwidthRateLimit(ctx context.Context, in *UpdateBandwidthRateLimitInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.ObjectStorageService/UpdateDownLoadBandwidthRateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) UpdateUpLoadBandwidthRateLimit(ctx context.Context, in *UpdateBandwidthRateLimitInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.ObjectStorageService/UpdateUpLoadBandwidthRateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) AppendObject(ctx context.Context, opts ...grpc.CallOption) (ObjectStorageService_AppendObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObjectStorageService_ServiceDesc.Streams[3], "/spec.proto.extension.v1.ObjectStorageService/AppendObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectStorageServiceAppendObjectClient{stream}
	return x, nil
}

type ObjectStorageService_AppendObjectClient interface {
	Send(*AppendObjectInput) error
	CloseAndRecv() (*AppendObjectOutput, error)
	grpc.ClientStream
}

type objectStorageServiceAppendObjectClient struct {
	grpc.ClientStream
}

func (x *objectStorageServiceAppendObjectClient) Send(m *AppendObjectInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *objectStorageServiceAppendObjectClient) CloseAndRecv() (*AppendObjectOutput, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AppendObjectOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectStorageServiceClient) ListParts(ctx context.Context, in *ListPartsInput, opts ...grpc.CallOption) (*ListPartsOutput, error) {
	out := new(ListPartsOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.ObjectStorageService/ListParts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectStorageServiceServer is the server API for ObjectStorageService service.
// All implementations should embed UnimplementedObjectStorageServiceServer
// for forward compatibility
type ObjectStorageServiceServer interface {
	InitClient(context.Context, *InitInput) (*emptypb.Empty, error)
	PutObject(ObjectStorageService_PutObjectServer) error
	GetObject(*GetObjectInput, ObjectStorageService_GetObjectServer) error
	DeleteObject(context.Context, *DeleteObjectInput) (*DeleteObjectOutput, error)
	PutObjectTagging(context.Context, *PutObjectTaggingInput) (*PutObjectTaggingOutput, error)
	DeleteObjectTagging(context.Context, *DeleteObjectTaggingInput) (*DeleteObjectTaggingOutput, error)
	GetObjectTagging(context.Context, *GetObjectTaggingInput) (*GetObjectTaggingOutput, error)
	CopyObject(context.Context, *CopyObjectInput) (*CopyObjectOutput, error)
	DeleteObjects(context.Context, *DeleteObjectsInput) (*DeleteObjectsOutput, error)
	ListObjects(context.Context, *ListObjectsInput) (*ListObjectsOutput, error)
	GetObjectAcl(context.Context, *GetObjectAclInput) (*GetObjectAclOutput, error)
	PutObjectAcl(context.Context, *PutObjectAclInput) (*PutObjectAclOutput, error)
	RestoreObject(context.Context, *RestoreObjectInput) (*RestoreObjectOutput, error)
	CreateMultipartUpload(context.Context, *CreateMultipartUploadInput) (*CreateMultipartUploadOutput, error)
	UploadPart(ObjectStorageService_UploadPartServer) error
	UploadPartCopy(context.Context, *UploadPartCopyInput) (*UploadPartCopyOutput, error)
	CompleteMultipartUpload(context.Context, *CompleteMultipartUploadInput) (*CompleteMultipartUploadOutput, error)
	AbortMultipartUpload(context.Context, *AbortMultipartUploadInput) (*AbortMultipartUploadOutput, error)
	ListMultipartUploads(context.Context, *ListMultipartUploadsInput) (*ListMultipartUploadsOutput, error)
	ListObjectVersions(context.Context, *ListObjectVersionsInput) (*ListObjectVersionsOutput, error)
	HeadObject(context.Context, *HeadObjectInput) (*HeadObjectOutput, error)
	IsObjectExist(context.Context, *IsObjectExistInput) (*IsObjectExistOutput, error)
	SignURL(context.Context, *SignURLInput) (*SignURLOutput, error)
	UpdateDownLoadBandwidthRateLimit(context.Context, *UpdateBandwidthRateLimitInput) (*emptypb.Empty, error)
	UpdateUpLoadBandwidthRateLimit(context.Context, *UpdateBandwidthRateLimitInput) (*emptypb.Empty, error)
	AppendObject(ObjectStorageService_AppendObjectServer) error
	ListParts(context.Context, *ListPartsInput) (*ListPartsOutput, error)
}

// UnimplementedObjectStorageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedObjectStorageServiceServer struct {
}

func (UnimplementedObjectStorageServiceServer) InitClient(context.Context, *InitInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitClient not implemented")
}
func (UnimplementedObjectStorageServiceServer) PutObject(ObjectStorageService_PutObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method PutObject not implemented")
}
func (UnimplementedObjectStorageServiceServer) GetObject(*GetObjectInput, ObjectStorageService_GetObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (UnimplementedObjectStorageServiceServer) DeleteObject(context.Context, *DeleteObjectInput) (*DeleteObjectOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedObjectStorageServiceServer) PutObjectTagging(context.Context, *PutObjectTaggingInput) (*PutObjectTaggingOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutObjectTagging not implemented")
}
func (UnimplementedObjectStorageServiceServer) DeleteObjectTagging(context.Context, *DeleteObjectTaggingInput) (*DeleteObjectTaggingOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObjectTagging not implemented")
}
func (UnimplementedObjectStorageServiceServer) GetObjectTagging(context.Context, *GetObjectTaggingInput) (*GetObjectTaggingOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectTagging not implemented")
}
func (UnimplementedObjectStorageServiceServer) CopyObject(context.Context, *CopyObjectInput) (*CopyObjectOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyObject not implemented")
}
func (UnimplementedObjectStorageServiceServer) DeleteObjects(context.Context, *DeleteObjectsInput) (*DeleteObjectsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObjects not implemented")
}
func (UnimplementedObjectStorageServiceServer) ListObjects(context.Context, *ListObjectsInput) (*ListObjectsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjects not implemented")
}
func (UnimplementedObjectStorageServiceServer) GetObjectAcl(context.Context, *GetObjectAclInput) (*GetObjectAclOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectAcl not implemented")
}
func (UnimplementedObjectStorageServiceServer) PutObjectAcl(context.Context, *PutObjectAclInput) (*PutObjectAclOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutObjectAcl not implemented")
}
func (UnimplementedObjectStorageServiceServer) RestoreObject(context.Context, *RestoreObjectInput) (*RestoreObjectOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreObject not implemented")
}
func (UnimplementedObjectStorageServiceServer) CreateMultipartUpload(context.Context, *CreateMultipartUploadInput) (*CreateMultipartUploadOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMultipartUpload not implemented")
}
func (UnimplementedObjectStorageServiceServer) UploadPart(ObjectStorageService_UploadPartServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadPart not implemented")
}
func (UnimplementedObjectStorageServiceServer) UploadPartCopy(context.Context, *UploadPartCopyInput) (*UploadPartCopyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPartCopy not implemented")
}
func (UnimplementedObjectStorageServiceServer) CompleteMultipartUpload(context.Context, *CompleteMultipartUploadInput) (*CompleteMultipartUploadOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteMultipartUpload not implemented")
}
func (UnimplementedObjectStorageServiceServer) AbortMultipartUpload(context.Context, *AbortMultipartUploadInput) (*AbortMultipartUploadOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortMultipartUpload not implemented")
}
func (UnimplementedObjectStorageServiceServer) ListMultipartUploads(context.Context, *ListMultipartUploadsInput) (*ListMultipartUploadsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMultipartUploads not implemented")
}
func (UnimplementedObjectStorageServiceServer) ListObjectVersions(context.Context, *ListObjectVersionsInput) (*ListObjectVersionsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjectVersions not implemented")
}
func (UnimplementedObjectStorageServiceServer) HeadObject(context.Context, *HeadObjectInput) (*HeadObjectOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeadObject not implemented")
}
func (UnimplementedObjectStorageServiceServer) IsObjectExist(context.Context, *IsObjectExistInput) (*IsObjectExistOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsObjectExist not implemented")
}
func (UnimplementedObjectStorageServiceServer) SignURL(context.Context, *SignURLInput) (*SignURLOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignURL not implemented")
}
func (UnimplementedObjectStorageServiceServer) UpdateDownLoadBandwidthRateLimit(context.Context, *UpdateBandwidthRateLimitInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDownLoadBandwidthRateLimit not implemented")
}
func (UnimplementedObjectStorageServiceServer) UpdateUpLoadBandwidthRateLimit(context.Context, *UpdateBandwidthRateLimitInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUpLoadBandwidthRateLimit not implemented")
}
func (UnimplementedObjectStorageServiceServer) AppendObject(ObjectStorageService_AppendObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method AppendObject not implemented")
}
func (UnimplementedObjectStorageServiceServer) ListParts(context.Context, *ListPartsInput) (*ListPartsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParts not implemented")
}

// UnsafeObjectStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectStorageServiceServer will
// result in compilation errors.
type UnsafeObjectStorageServiceServer interface {
	mustEmbedUnimplementedObjectStorageServiceServer()
}

func RegisterObjectStorageServiceServer(s grpc.ServiceRegistrar, srv ObjectStorageServiceServer) {
	s.RegisterService(&ObjectStorageService_ServiceDesc, srv)
}

func _ObjectStorageService_InitClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).InitClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.ObjectStorageService/InitClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).InitClient(ctx, req.(*InitInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_PutObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ObjectStorageServiceServer).PutObject(&objectStorageServicePutObjectServer{stream})
}

type ObjectStorageService_PutObjectServer interface {
	SendAndClose(*PutObjectOutput) error
	Recv() (*PutObjectInput, error)
	grpc.ServerStream
}

type objectStorageServicePutObjectServer struct {
	grpc.ServerStream
}

func (x *objectStorageServicePutObjectServer) SendAndClose(m *PutObjectOutput) error {
	return x.ServerStream.SendMsg(m)
}

func (x *objectStorageServicePutObjectServer) Recv() (*PutObjectInput, error) {
	m := new(PutObjectInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ObjectStorageService_GetObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetObjectInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjectStorageServiceServer).GetObject(m, &objectStorageServiceGetObjectServer{stream})
}

type ObjectStorageService_GetObjectServer interface {
	Send(*GetObjectOutput) error
	grpc.ServerStream
}

type objectStorageServiceGetObjectServer struct {
	grpc.ServerStream
}

func (x *objectStorageServiceGetObjectServer) Send(m *GetObjectOutput) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjectStorageService_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.ObjectStorageService/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).DeleteObject(ctx, req.(*DeleteObjectInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_PutObjectTagging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutObjectTaggingInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).PutObjectTagging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.ObjectStorageService/PutObjectTagging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).PutObjectTagging(ctx, req.(*PutObjectTaggingInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_DeleteObjectTagging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectTaggingInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).DeleteObjectTagging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.ObjectStorageService/DeleteObjectTagging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).DeleteObjectTagging(ctx, req.(*DeleteObjectTaggingInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_GetObjectTagging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectTaggingInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).GetObjectTagging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.ObjectStorageService/GetObjectTagging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).GetObjectTagging(ctx, req.(*GetObjectTaggingInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_CopyObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyObjectInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).CopyObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.ObjectStorageService/CopyObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).CopyObject(ctx, req.(*CopyObjectInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_DeleteObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).DeleteObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.ObjectStorageService/DeleteObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).DeleteObjects(ctx, req.(*DeleteObjectsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_ListObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObjectsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).ListObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.ObjectStorageService/ListObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).ListObjects(ctx, req.(*ListObjectsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_GetObjectAcl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectAclInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).GetObjectAcl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.ObjectStorageService/GetObjectAcl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).GetObjectAcl(ctx, req.(*GetObjectAclInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_PutObjectAcl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutObjectAclInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).PutObjectAcl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.ObjectStorageService/PutObjectAcl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).PutObjectAcl(ctx, req.(*PutObjectAclInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_RestoreObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreObjectInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).RestoreObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.ObjectStorageService/RestoreObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).RestoreObject(ctx, req.(*RestoreObjectInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_CreateMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultipartUploadInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).CreateMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.ObjectStorageService/CreateMultipartUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).CreateMultipartUpload(ctx, req.(*CreateMultipartUploadInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_UploadPart_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ObjectStorageServiceServer).UploadPart(&objectStorageServiceUploadPartServer{stream})
}

type ObjectStorageService_UploadPartServer interface {
	SendAndClose(*UploadPartOutput) error
	Recv() (*UploadPartInput, error)
	grpc.ServerStream
}

type objectStorageServiceUploadPartServer struct {
	grpc.ServerStream
}

func (x *objectStorageServiceUploadPartServer) SendAndClose(m *UploadPartOutput) error {
	return x.ServerStream.SendMsg(m)
}

func (x *objectStorageServiceUploadPartServer) Recv() (*UploadPartInput, error) {
	m := new(UploadPartInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ObjectStorageService_UploadPartCopy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPartCopyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).UploadPartCopy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.ObjectStorageService/UploadPartCopy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).UploadPartCopy(ctx, req.(*UploadPartCopyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_CompleteMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteMultipartUploadInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).CompleteMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.ObjectStorageService/CompleteMultipartUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).CompleteMultipartUpload(ctx, req.(*CompleteMultipartUploadInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_AbortMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortMultipartUploadInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).AbortMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.ObjectStorageService/AbortMultipartUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).AbortMultipartUpload(ctx, req.(*AbortMultipartUploadInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_ListMultipartUploads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMultipartUploadsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).ListMultipartUploads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.ObjectStorageService/ListMultipartUploads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).ListMultipartUploads(ctx, req.(*ListMultipartUploadsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_ListObjectVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObjectVersionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).ListObjectVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.ObjectStorageService/ListObjectVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).ListObjectVersions(ctx, req.(*ListObjectVersionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_HeadObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeadObjectInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).HeadObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.ObjectStorageService/HeadObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).HeadObject(ctx, req.(*HeadObjectInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_IsObjectExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsObjectExistInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).IsObjectExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.ObjectStorageService/IsObjectExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).IsObjectExist(ctx, req.(*IsObjectExistInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_SignURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignURLInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).SignURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.ObjectStorageService/SignURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).SignURL(ctx, req.(*SignURLInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_UpdateDownLoadBandwidthRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBandwidthRateLimitInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).UpdateDownLoadBandwidthRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.ObjectStorageService/UpdateDownLoadBandwidthRateLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).UpdateDownLoadBandwidthRateLimit(ctx, req.(*UpdateBandwidthRateLimitInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_UpdateUpLoadBandwidthRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBandwidthRateLimitInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).UpdateUpLoadBandwidthRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.ObjectStorageService/UpdateUpLoadBandwidthRateLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).UpdateUpLoadBandwidthRateLimit(ctx, req.(*UpdateBandwidthRateLimitInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_AppendObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ObjectStorageServiceServer).AppendObject(&objectStorageServiceAppendObjectServer{stream})
}

type ObjectStorageService_AppendObjectServer interface {
	SendAndClose(*AppendObjectOutput) error
	Recv() (*AppendObjectInput, error)
	grpc.ServerStream
}

type objectStorageServiceAppendObjectServer struct {
	grpc.ServerStream
}

func (x *objectStorageServiceAppendObjectServer) SendAndClose(m *AppendObjectOutput) error {
	return x.ServerStream.SendMsg(m)
}

func (x *objectStorageServiceAppendObjectServer) Recv() (*AppendObjectInput, error) {
	m := new(AppendObjectInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ObjectStorageService_ListParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPartsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).ListParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.ObjectStorageService/ListParts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).ListParts(ctx, req.(*ListPartsInput))
	}
	return interceptor(ctx, in, info, handler)
}

// ObjectStorageService_ServiceDesc is the grpc.ServiceDesc for ObjectStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjectStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spec.proto.extension.v1.ObjectStorageService",
	HandlerType: (*ObjectStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitClient",
			Handler:    _ObjectStorageService_InitClient_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _ObjectStorageService_DeleteObject_Handler,
		},
		{
			MethodName: "PutObjectTagging",
			Handler:    _ObjectStorageService_PutObjectTagging_Handler,
		},
		{
			MethodName: "DeleteObjectTagging",
			Handler:    _ObjectStorageService_DeleteObjectTagging_Handler,
		},
		{
			MethodName: "GetObjectTagging",
			Handler:    _ObjectStorageService_GetObjectTagging_Handler,
		},
		{
			MethodName: "CopyObject",
			Handler:    _ObjectStorageService_CopyObject_Handler,
		},
		{
			MethodName: "DeleteObjects",
			Handler:    _ObjectStorageService_DeleteObjects_Handler,
		},
		{
			MethodName: "ListObjects",
			Handler:    _ObjectStorageService_ListObjects_Handler,
		},
		{
			MethodName: "GetObjectAcl",
			Handler:    _ObjectStorageService_GetObjectAcl_Handler,
		},
		{
			MethodName: "PutObjectAcl",
			Handler:    _ObjectStorageService_PutObjectAcl_Handler,
		},
		{
			MethodName: "RestoreObject",
			Handler:    _ObjectStorageService_RestoreObject_Handler,
		},
		{
			MethodName: "CreateMultipartUpload",
			Handler:    _ObjectStorageService_CreateMultipartUpload_Handler,
		},
		{
			MethodName: "UploadPartCopy",
			Handler:    _ObjectStorageService_UploadPartCopy_Handler,
		},
		{
			MethodName: "CompleteMultipartUpload",
			Handler:    _ObjectStorageService_CompleteMultipartUpload_Handler,
		},
		{
			MethodName: "AbortMultipartUpload",
			Handler:    _ObjectStorageService_AbortMultipartUpload_Handler,
		},
		{
			MethodName: "ListMultipartUploads",
			Handler:    _ObjectStorageService_ListMultipartUploads_Handler,
		},
		{
			MethodName: "ListObjectVersions",
			Handler:    _ObjectStorageService_ListObjectVersions_Handler,
		},
		{
			MethodName: "HeadObject",
			Handler:    _ObjectStorageService_HeadObject_Handler,
		},
		{
			MethodName: "IsObjectExist",
			Handler:    _ObjectStorageService_IsObjectExist_Handler,
		},
		{
			MethodName: "SignURL",
			Handler:    _ObjectStorageService_SignURL_Handler,
		},
		{
			MethodName: "UpdateDownLoadBandwidthRateLimit",
			Handler:    _ObjectStorageService_UpdateDownLoadBandwidthRateLimit_Handler,
		},
		{
			MethodName: "UpdateUpLoadBandwidthRateLimit",
			Handler:    _ObjectStorageService_UpdateUpLoadBandwidthRateLimit_Handler,
		},
		{
			MethodName: "ListParts",
			Handler:    _ObjectStorageService_ListParts_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutObject",
			Handler:       _ObjectStorageService_PutObject_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetObject",
			Handler:       _ObjectStorageService_GetObject_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadPart",
			Handler:       _ObjectStorageService_UploadPart_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AppendObject",
			Handler:       _ObjectStorageService_AppendObject_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "oss.proto",
}
