syntax = "proto3";

package spec.proto.runtime.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/layotto/layotto/spec/proto/runtime/v1;runtime";

service Runtime {
  //SayHello used for test
  rpc SayHello(SayHelloRequest) returns (SayHelloResponse) {}

  // InvokeService do rpc calls
  rpc InvokeService(InvokeServiceRequest) returns (InvokeResponse) {}

	// GetConfiguration gets configuration from configuration store.
	rpc GetConfiguration(GetConfigurationRequest) returns (GetConfigurationResponse) {}

  // SaveConfiguration saves configuration into configuration store.
  rpc SaveConfiguration(SaveConfigurationRequest) returns (google.protobuf.Empty) {}

  // DeleteConfiguration deletes configuration from configuration store.
  rpc DeleteConfiguration(DeleteConfigurationRequest) returns (google.protobuf.Empty) {}

  // SubscribeConfiguration gets configuration from configuration store and subscribe the updates.
  rpc SubscribeConfiguration(stream SubscribeConfigurationRequest) returns (stream SubscribeConfigurationResponse) {}

  //  Below are the APIs compatible with Dapr.
  //  We try to keep them same as Dapr's because we want to work with Dapr to build an API spec for cloud native runtime
  //  ,like CloudEvent for event data.

  // Publishes events to the specific topic.
  rpc PublishEvent(PublishEventRequest) returns (google.protobuf.Empty) {}
}

message SayHelloRequest {
  string service_name = 1;
}

message SayHelloResponse {
  string hello = 1;
}

message InvokeServiceRequest {
  string id = 1;
  CommonInvokeRequest message = 3;
}

message CommonInvokeRequest {
  string method = 1;
  google.protobuf.Any data = 2;
  string content_type = 3;
  HTTPExtension http_extension = 4;
}

message HTTPExtension {
  enum Verb {
    NONE = 0;
    GET = 1;
    HEAD = 2;
    POST = 3;
    PUT = 4;
    DELETE = 5;
    CONNECT = 6;
    OPTIONS = 7;
    TRACE = 8;
  }

  Verb verb = 1;

  string querystring = 2;
}

message InvokeResponse {
  google.protobuf.Any data = 1;
  string content_type = 2;
}

// ConfigurationItem represents a configuration item with key, content and other information.
message ConfigurationItem {
  // Required. The key of configuration item
  string key = 1;

  // The content of configuration item
  // Empty if the configuration is not set, including the case that the configuration is changed from value-set to value-not-set.
  string content = 2;

  // The group of configuration item.
  string group = 3;

  // The label of configuration item.
  string label = 4;

  // The tag list of configuration item.
  map<string, string> tags = 5;

  // The metadata which will be passed to configuration store component.
  map<string, string> metadata = 6;
}

// GetConfigurationRequest is the message to get a list of key-value configuration from specified configuration store.
message GetConfigurationRequest {
  // The name of configuration store.
  string store_name = 1;

  // The application id which
  // Only used for admin, Ignored and reset for normal client
  string app_id = 2;

  // The group of keys.
  string group = 3;

  // The label for keys.
  string label = 4;

  // The keys to get.
  repeated string keys = 5;

  // The metadata which will be sent to configuration store components.
  map<string, string> metadata = 6;

  // Subscribes update event for given keys.
  // If true, when any configuration item in this request is updated, app will receive event by OnConfigurationEvent() of app callback
  bool subscribe_update = 7;
}

// GetConfigurationResponse is the response conveying the list of configuration values.
message GetConfigurationResponse {
  // The list of items containing configuration values.
  repeated ConfigurationItem items = 1;
}

// SubscribeConfigurationRequest is the message to get a list of key-value configuration from specified configuration store.
message SubscribeConfigurationRequest {
  // The name of configuration store.
  string store_name = 1;

  // The application id which
  // Only used for admin, ignored and reset for normal client
  string app_id = 2;

  // The group of keys.
  string group = 3;

  // The label for keys.
  string label = 4;

  // The keys to get.
  repeated string keys = 5;

  // The metadata which will be sent to configuration store components.
  map<string, string> metadata = 6;
}

// SubscribeConfigurationResponse is the response conveying the list of configuration values.
message SubscribeConfigurationResponse {
  // The name of configuration store.
  string store_name = 1;

  // The application id.
  // Only used for admin client.
  string app_id = 2;

  // The list of items containing configuration values.
  repeated ConfigurationItem items = 3;
}

// SaveConfigurationRequest is the message to save a list of key-value configuration into specified configuration store.
message SaveConfigurationRequest {
  // The name of configuration store.
  string store_name = 1;

  // The application id which
  // Only used for admin, ignored and reset for normal client
  string app_id = 2;

  // The list of configuration items to save.
  // To delete a exist item, set the key (also label) and let content to be empty
  repeated ConfigurationItem items = 3;

  // The metadata which will be sent to configuration store components.
  map<string, string> metadata = 4;
}

// DeleteConfigurationRequest is the message to delete a list of key-value configuration from specified configuration store.
message DeleteConfigurationRequest {
  // The name of configuration store.
  string store_name = 1;

  // The application id which
  // Only used for admin, Ignored and reset for normal client
  string app_id = 2;

  // The group of keys.
  string group = 3;

  // The label for keys.
  string label = 4;

  // The keys to get.
  repeated string keys = 5;

  // The metadata which will be sent to configuration store components.
  map<string, string> metadata = 6;
}

// PublishEventRequest is the message to publish event data to pubsub topic
message PublishEventRequest {
  // The name of the pubsub component
  string pubsub_name = 1;

  // The pubsub topic
  string topic = 2;

  // The data which will be published to topic.
  bytes data = 3;

  // The content type for the data (optional).
  string data_content_type = 4;

  // The metadata passing to pub components
  //
  // metadata property:
  // - key : the key of the message.
  map<string, string> metadata = 5;
}