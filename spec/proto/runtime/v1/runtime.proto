syntax = "proto3";

package spec.proto.runtime.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";

option go_package = "mosn.io/layotto/spec/proto/runtime/v1;runtime";

service Runtime {
  //SayHello used for test
  rpc SayHello(SayHelloRequest) returns (SayHelloResponse) {}

  // InvokeService do rpc calls
  rpc InvokeService(InvokeServiceRequest) returns (InvokeResponse) {}

  // GetConfiguration gets configuration from configuration store.
  rpc GetConfiguration(GetConfigurationRequest) returns (GetConfigurationResponse) {}

  // SaveConfiguration saves configuration into configuration store.
  rpc SaveConfiguration(SaveConfigurationRequest) returns (google.protobuf.Empty) {}

  // DeleteConfiguration deletes configuration from configuration store.
  rpc DeleteConfiguration(DeleteConfigurationRequest) returns (google.protobuf.Empty) {}

  // SubscribeConfiguration gets configuration from configuration store and subscribe the updates.
  rpc SubscribeConfiguration(stream SubscribeConfigurationRequest) returns (stream SubscribeConfigurationResponse) {}

  // Distributed Lock API
  rpc TryLock(TryLockRequest)returns (TryLockResponse) {}

  rpc Unlock(UnlockRequest)returns (UnlockResponse) {}

  //  Below are the APIs compatible with Dapr.
  //  We try to keep them same as Dapr's because we want to work with Dapr to build an API spec for cloud native runtime
  //  ,like CloudEvent for event data.

  // Gets the state for a specific key.
  rpc GetState(GetStateRequest) returns (GetStateResponse) {}

  // Gets a bulk of state items for a list of keys
  rpc GetBulkState(GetBulkStateRequest) returns (GetBulkStateResponse) {}

  // Saves the state for a specific key.
  rpc SaveState(SaveStateRequest) returns (google.protobuf.Empty) {}

  // Deletes the state for a specific key.
  rpc DeleteState(DeleteStateRequest) returns (google.protobuf.Empty) {}

  // Deletes a bulk of state items for a list of keys
  rpc DeleteBulkState(DeleteBulkStateRequest) returns (google.protobuf.Empty) {}

  // Executes transactions for a specified store
  rpc ExecuteStateTransaction(ExecuteStateTransactionRequest) returns (google.protobuf.Empty) {}

  // Publishes events to the specific topic.
  rpc PublishEvent(PublishEventRequest) returns (google.protobuf.Empty) {}

}

message TryLockRequest {
  string store_name = 1;
  // resource_id is the lock key.
  string resource_id = 2;
  // lock_owner indicate the identifier of lock owner.
  // This field is required.You can generate a uuid as lock_owner.For example,in golang:
  //
  // req.LockOwner = uuid.New().String()
  //
  // This field is per request,not per process,so it is different for each request,
  // which aims to prevent multi-thread in the same process trying the same lock concurrently.
  //
  // The reason why we don't make it automatically generated is:
  // 1. If it is automatically generated,there must be a 'my_lock_owner_id' field in the response.
  // This name is so weird that we think it is inappropriate to put it into the api spec
  // 2. If we change the field 'my_lock_owner_id' in the response to 'lock_owner',which means the current lock owner of this lock,
  // we find that in some lock services users can't get the current lock owner.Actually users don't need it at all.
  // 3. When reentrant lock is needed,the existing lock_owner is required to identify client and check "whether this client can reenter this lock".
  // So this field in the request shouldn't be removed.
  string lock_owner = 3;
  // expire is the time before expire.The time unit is second.
  int32 expire = 4;
}

message TryLockResponse {

  bool success = 1;
}

message UnlockRequest {
  string store_name = 1;
  // resource_id is the lock key.
  string resource_id = 2;

  string lock_owner = 3;
}

message UnlockResponse {
  enum Status {
    SUCCESS = 0;
    LOCK_UNEXIST = 1;
    LOCK_BELONG_TO_OTHERS = 2;
    INTERNAL_ERROR = 3;
  }

  Status status = 1;
}

message SayHelloRequest {
  string service_name = 1;
  string name = 2;
}

message SayHelloResponse {
  string hello = 1;
}

message InvokeServiceRequest {
  string id = 1;
  CommonInvokeRequest message = 3;
}

message CommonInvokeRequest {
  string method = 1;
  google.protobuf.Any data = 2;
  string content_type = 3;
  HTTPExtension http_extension = 4;
}

message HTTPExtension {
  enum Verb {
    NONE = 0;
    GET = 1;
    HEAD = 2;
    POST = 3;
    PUT = 4;
    DELETE = 5;
    CONNECT = 6;
    OPTIONS = 7;
    TRACE = 8;
  }

  Verb verb = 1;

  string querystring = 2;
}

message InvokeResponse {
  google.protobuf.Any data = 1;
  string content_type = 2;
}

// ConfigurationItem represents a configuration item with key, content and other information.
message ConfigurationItem {
  // Required. The key of configuration item
  string key = 1;

  // The content of configuration item
  // Empty if the configuration is not set, including the case that the configuration is changed from value-set to value-not-set.
  string content = 2;

  // The group of configuration item.
  string group = 3;

  // The label of configuration item.
  string label = 4;

  // The tag list of configuration item.
  map<string, string> tags = 5;

  // The metadata which will be passed to configuration store component.
  map<string, string> metadata = 6;
}

// GetConfigurationRequest is the message to get a list of key-value configuration from specified configuration store.
message GetConfigurationRequest {
  // The name of configuration store.
  string store_name = 1;

  // The application id which
  // Only used for admin, Ignored and reset for normal client
  string app_id = 2;

  // The group of keys.
  string group = 3;

  // The label for keys.
  string label = 4;

  // The keys to get.
  repeated string keys = 5;

  // The metadata which will be sent to configuration store components.
  map<string, string> metadata = 6;

  // Subscribes update event for given keys.
  // If true, when any configuration item in this request is updated, app will receive event by OnConfigurationEvent() of app callback
  bool subscribe_update = 7;
}

// GetConfigurationResponse is the response conveying the list of configuration values.
message GetConfigurationResponse {
  // The list of items containing configuration values.
  repeated ConfigurationItem items = 1;
}

// SubscribeConfigurationRequest is the message to get a list of key-value configuration from specified configuration store.
message SubscribeConfigurationRequest {
  // The name of configuration store.
  string store_name = 1;

  // The application id which
  // Only used for admin, ignored and reset for normal client
  string app_id = 2;

  // The group of keys.
  string group = 3;

  // The label for keys.
  string label = 4;

  // The keys to get.
  repeated string keys = 5;

  // The metadata which will be sent to configuration store components.
  map<string, string> metadata = 6;
}

// SubscribeConfigurationResponse is the response conveying the list of configuration values.
message SubscribeConfigurationResponse {
  // The name of configuration store.
  string store_name = 1;

  // The application id.
  // Only used for admin client.
  string app_id = 2;

  // The list of items containing configuration values.
  repeated ConfigurationItem items = 3;
}

// SaveConfigurationRequest is the message to save a list of key-value configuration into specified configuration store.
message SaveConfigurationRequest {
  // The name of configuration store.
  string store_name = 1;

  // The application id which
  // Only used for admin, ignored and reset for normal client
  string app_id = 2;

  // The list of configuration items to save.
  // To delete a exist item, set the key (also label) and let content to be empty
  repeated ConfigurationItem items = 3;

  // The metadata which will be sent to configuration store components.
  map<string, string> metadata = 4;
}

// DeleteConfigurationRequest is the message to delete a list of key-value configuration from specified configuration store.
message DeleteConfigurationRequest {
  // The name of configuration store.
  string store_name = 1;

  // The application id which
  // Only used for admin, Ignored and reset for normal client
  string app_id = 2;

  // The group of keys.
  string group = 3;

  // The label for keys.
  string label = 4;

  // The keys to get.
  repeated string keys = 5;

  // The metadata which will be sent to configuration store components.
  map<string, string> metadata = 6;
}


// GetStateRequest is the message to get key-value states from specific state store.
message GetStateRequest {
  // The name of state store.
  string store_name = 1;

  // The key of the desired state
  string key = 2;

  // The read consistency of the state store.
  StateOptions.StateConsistency consistency = 3;

  // The metadata which will be sent to state store components.
  map<string, string> metadata = 4;
}

// GetBulkStateRequest is the message to get a list of key-value states from specific state store.
message GetBulkStateRequest {
  // The name of state store.
  string store_name = 1;

  // The keys to get.
  repeated string keys = 2;

  // The number of parallel operations executed on the state store for a get operation.
  int32 parallelism = 3;

  // The metadata which will be sent to state store components.
  map<string, string> metadata = 4;
}

// GetBulkStateResponse is the response conveying the list of state values.
message GetBulkStateResponse {
  // The list of items containing the keys to get values for.
  repeated BulkStateItem items = 1;
}

// BulkStateItem is the response item for a bulk get operation.
// Return values include the item key, data and etag.
message BulkStateItem {
  // state item key
  string key = 1;

  // The byte array data
  bytes data = 2;

  // The entity tag which represents the specific version of data.
  // ETag format is defined by the corresponding data store.
  string etag = 3;

  // The error that was returned from the state store in case of a failed get operation.
  string error = 4;

  // The metadata which will be sent to app.
  map<string, string> metadata = 5;
}

// GetStateResponse is the response conveying the state value and etag.
message GetStateResponse {
  // The byte array data
  bytes data = 1;

  // The entity tag which represents the specific version of data.
  // ETag format is defined by the corresponding data store.
  string etag = 2;

  // The metadata which will be sent to app.
  map<string, string> metadata = 3;
}

// DeleteStateRequest is the message to delete key-value states in the specific state store.
message DeleteStateRequest {
  // The name of state store.
  string store_name = 1;

  // The key of the desired state
  string key = 2;

  // The entity tag which represents the specific version of data.
  // The exact ETag format is defined by the corresponding data store.
  Etag etag = 3;

  // State operation options which includes concurrency/
  // consistency/retry_policy.
  StateOptions options = 4;

  // The metadata which will be sent to state store components.
  map<string, string> metadata = 5;
}

// DeleteBulkStateRequest is the message to delete a list of key-value states from specific state store.
message DeleteBulkStateRequest {
  // The name of state store.
  string store_name = 1;

  // The array of the state key values.
  repeated StateItem states = 2;
}

// SaveStateRequest is the message to save multiple states into state store.
message SaveStateRequest {
  // The name of state store.
  string store_name = 1;

  // The array of the state key values.
  repeated StateItem states = 2;
}

// StateItem represents state key, value, and additional options to save state.
message StateItem {
  // Required. The state key
  string key = 1;

  // Required. The state data for key
  bytes value = 2;

  // The entity tag which represents the specific version of data.
  // The exact ETag format is defined by the corresponding data store.
  Etag etag = 3;

  // The metadata which will be passed to state store component.
  map<string, string> metadata = 4;

  // Options for concurrency and consistency to save the state.
  StateOptions options = 5;
}

// Etag represents a state item version
message Etag {
  // value sets the etag value
  string value = 1;
}

// StateOptions configures concurrency and consistency for state operations
message StateOptions {
  // Enum describing the supported concurrency for state.
  enum StateConcurrency {
    CONCURRENCY_UNSPECIFIED = 0;
    CONCURRENCY_FIRST_WRITE = 1;
    CONCURRENCY_LAST_WRITE = 2;
  }

  // Enum describing the supported consistency for state.
  enum StateConsistency {
    CONSISTENCY_UNSPECIFIED = 0;
    CONSISTENCY_EVENTUAL = 1;
    CONSISTENCY_STRONG = 2;
  }

  StateConcurrency concurrency = 1;
  StateConsistency consistency = 2;
}

// TransactionalStateOperation is the message to execute a specified operation with a key-value pair.
message TransactionalStateOperation {
  // The type of operation to be executed
  string operationType = 1;

  // State values to be operated on
  StateItem request = 2;
}
// ExecuteStateTransactionRequest is the message to execute multiple operations on a specified store.
message ExecuteStateTransactionRequest {
  // Required. name of state store.
  string storeName = 1;

  // Required. transactional operation list.
  repeated TransactionalStateOperation operations = 2;

  // The metadata used for transactional operations.
  map<string, string> metadata = 3;
}

// PublishEventRequest is the message to publish event data to pubsub topic
message PublishEventRequest {
  // The name of the pubsub component
  string pubsub_name = 1;

  // The pubsub topic
  string topic = 2;

  // The data which will be published to topic.
  bytes data = 3;

  // The content type for the data (optional).
  string data_content_type = 4;

  // The metadata passing to pub components
  //
  // metadata property:
  // - key : the key of the message.
  map<string, string> metadata = 5;
}