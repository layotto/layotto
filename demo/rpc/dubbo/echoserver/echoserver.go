package main

import (
	"net"

	"mosn.io/mosn/pkg/log"
)

var (
	addr      = "127.0.0.1:20880"
	respBytes = []byte{0xda, 0xbb, 0x02, 0x14,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b,
		0x00, 0x00, 0x00, 0x44,
		0x94, 0x30, 0x33, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
		0x20, 0x4d, 0x4f, 0x53, 0x4e, 0x2c, 0x20, 0x72,
		0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20,
		0x66, 0x72, 0x6f, 0x6d, 0x20, 0x70, 0x72, 0x6f,
		0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x31,
		0x30, 0x2e, 0x30, 0x2e, 0x37, 0x31, 0x2e, 0x30,
		0x3a, 0x32, 0x30, 0x38, 0x38, 0x30, 0x48, 0x05,
		0x64, 0x75, 0x62, 0x62, 0x6f, 0x05, 0x32, 0x2e,
		0x30, 0x2e, 0x32, 0x5a}
)

func main() {
	conn, err := net.Listen("tcp", addr)
	if err != nil {
		panic("conn failed")
	}

	for {
		accept := conn.Accept
		c, err := accept()
		if err != nil {
			log.DefaultLogger.Infof("accept closed")
		}
		//let serve do accept
		go func(c net.Conn) {
			defer c.Close()
			reqBuff := make([]byte, 512)

			readLength, err := c.Read(reqBuff)
			if err == nil {
				req := reqBuff[:readLength]
				log.DefaultLogger.Infof("in dubbo server,%v", req)
				log.DefaultLogger.Infof(c.RemoteAddr().String())
				if readLength < 16 {
					log.DefaultLogger.Errorf("req length error")
					return
				}
				copy(respBytes[4:12], req[4:12])
				log.DefaultLogger.Infof("out dubbo server,%v", respBytes)
				c.Write(respBytes)
			}
		}(c)
	}

}
