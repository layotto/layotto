package main

import (
	"context"
	"encoding/binary"
	"fmt"
	"log"
	"sync/atomic"

	runtimev1pb "mosn.io/layotto/spec/proto/runtime/v1"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/types/known/anypb"
)

var reqBytes = []byte{0xda, 0xbb, 0xc2, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, // stream id
	0x00, 0x00, 0x00, 0x9a,
	0x05, 0x32, 0x2e, 0x30, 0x2e, 0x32, 0x19, 0x6d,
	0x6f, 0x73, 0x6e, 0x2e, 0x69, 0x6f, 0x2e, 0x64,
	0x75, 0x62, 0x62, 0x6f, 0x2e, 0x44, 0x65, 0x6d,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x05, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x08, 0x73,
	0x61, 0x79, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12,
	0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61,
	0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x3b, 0x04, 0x4d, 0x4f, 0x53, 0x4e, 0x48,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x19, 0x6d, 0x6f,
	0x73, 0x6e, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x75,
	0x62, 0x62, 0x6f, 0x2e, 0x44, 0x65, 0x6d, 0x6f,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x19, 0x6d, 0x6f, 0x73, 0x6e, 0x2e, 0x69,
	0x6f, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e,
	0x44, 0x65, 0x6d, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x05, 0x30, 0x2e, 0x30, 0x2e,
	0x30, 0x5a}

func main() {
	streamID := uint64(0)

	conn, err := grpc.Dial("localhost:34904", grpc.WithInsecure())
	if err != nil {
		log.Fatal(err)
	}

	cli := runtimev1pb.NewRuntimeClient(conn)
	ctx, cancel := context.WithCancel(context.TODO())
	defer cancel()

	loop := 100
	for loop > 0 {
		loop--
		atomic.AddUint64(&streamID, 2)
		binary.BigEndian.PutUint64(reqBytes[4:12], streamID)
		resp, err := cli.InvokeService(
			ctx,
			&runtimev1pb.InvokeServiceRequest{
				Id: "HelloService:1.0",
				Message: &runtimev1pb.CommonInvokeRequest{
					Method:      "hello",
					ContentType: "",
					Data:        &anypb.Any{Value: reqBytes}}},
		)
		if err != nil {
			log.Fatal(err)
		}

		fmt.Println(string(resp.Data.GetValue()))
	}
}
