name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: "*"

jobs:

  build:
    name: ${{ matrix.os }} - Go ${{ matrix.go_version }}
    runs-on: ${{ matrix.os }}
    strategy:
      # If you want to matrix build , you can append the following list.
      matrix:
        go_version:
          - 1.15
        os:
          - ubuntu-latest

    env:
      DING_TOKEN: ${{ secrets.DING_TOKEN }}
      DING_SIGN: ${{ secrets.DING_SIGN }}

    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go_version }}
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Cache dependencies
        uses: actions/cache@v2.1.4
        with:
          # Cache
          path: ~/go/pkg/mod
          # Cache key
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          # An ordered list of keys to use for restoring the cache if no cache hit occurred for key
          restore-keys: |
            ${{ runner.os }}-go-

      - name: gitenv setup
        run: git config --global url.git@github.com:.insteadOf https://github.com/

      - name: Setup SSH Keys and known_hosts
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"

      - name: Get dependencies
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          else
              go get -v -t -d ./...
          fi

      - name: gofmt
        run: |
          go fmt ./... && git status && [[ -z `git status -s` ]]
          # diff -u <(echo -n) <(gofmt -d -s .)

      #- name: Install go ci lint
       # run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.27.0

      #- name: Run Linter
      #  run: golangci-lint run --timeout=10m -v
      - name: ut
        run: go test -count=1 -failfast -timeout 120s ./pkg/... -coverprofile cover.out && go tool cover -html=cover.out -o coverage.html && go tool cover -func=cover.out -o func.out && echo test func-coverage $(tail -1 func.out | awk '{print $3}')

      - name: Post Coverage
        run: bash <(curl -s https://codecov.io/bash)

      - name: integrate
        run: make wasm-integrate

