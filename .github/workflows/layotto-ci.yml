name: Layotto CI

on:
  push:
    branches: [main]
    paths-ignore:
      - '.ci/**'
      - 'docs/**'
      - '**/*.md'
  pull_request:
    branches: "*"
    paths-ignore:
      - '.ci/**'
      - 'docs/**'
      - '**/*.md'

jobs:
  style-check:
    name: Go Style Check
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.14.13
      - name: Cache dependencies
        uses: actions/cache@v2.1.4
        with:
          # Cache
          path: ~/go/pkg/mod
          # Cache key
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          # An ordered list of keys to use for restoring the cache if no cache hit occurred for key
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Get Go Dependencies
        run: |
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          else
              go get -v -t -d ./...
          fi
      - name: Format Go
        run: |
           make go.check.lint
  
  golangci-lint:
    name: Go CI Linter
    needs: [style-check]
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.14.13
    - name: Lint Golang
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest

  go-unit-test:
    name: Go Unit Test
    needs: [style-check]
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.14.13
    - name: Go Unit Test
      run: make go.check.unit

  coverage:
    name: Coverage Analysis
    needs: [go-unit-test,golangci-lint,style-check]
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Test Coverage
      run: make check.coverage 
    - name: Post Coverage
      run: bash <(curl -s https://codecov.io/bash)

  wasm-integrate:
    name: Integrate with WASM
    needs: [coverage]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.14.13
      - name: Check out code
        uses: actions/checkout@v2
      - name: Run Integrate tests.
        run:  make integrate.wasm

  runtime-integrate:
    name: Integrate with Runtime
    needs: [coverage]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.14.13
      - name: Check out code
        uses: actions/checkout@v2
      - name: Run Integrate tests.
        run:  make integrate.runtime

  build-push-linux-amd64-image:
    name: "[Linux:AMD64] Build Image"
    needs: [wasm-integrate,runtime-integrate]
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Layotto Latest Image
        run: |
          make image.build.linux_amd64.layotto
      - name: Push Image to DockerHub
        run: |
          make image.push.linux_amd64.layotto

  build-push-linux-arm64-image:
    name: "[Linux:ARM64] Build Image"
    needs: [wasm-integrate,runtime-integrate]
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Layotto Latest Image
        run: |
          make image.build.linux_arm64.layotto
      - name: Push Image to DockerHub
        run: |
          make image.push.linux_arm64.layotto

  build-push-darwin-amd64-image:
    name: "[Darwin:AMD64] Build Image"
    needs: [wasm-integrate,runtime-integrate]
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Layotto Latest Image
        run: |
          make image.build.darwin_amd64.layotto
      - name: Push Image to DockerHub
        run: |
          make image.push.darwin_amd64.layotto

  build-push-darwin-arm64-image:
    name: "[Darwin:ARM64] Build Image"
    needs: [wasm-integrate,runtime-integrate]
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Layotto Latest Image
        run: |
          make image.build.darwin_arm64.layotto
      - name: Push Image to DockerHub
        run: |
          make image.push.darwin_arm64.layotto

  build-binary-darwin-amd64-artifact:
    name:  "[Darwin:AMD64] Build Artifact"
    needs: [build-push-darwin-amd64-image]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.14.13
      - name: Check out code
        uses: actions/checkout@v2
        run: |
          make go.build.darwin_amd64.layotto
      - name: Publish Artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          name: layotto.darwin_amd64
          path: _output/darwin/amd64/layotto
          retention-days: 5
          if-no-files-found: error

  build-binary-darwin-arm64-artifact:
    name:  "[Darwin:ARM64] Build Artifact"
    needs: [build-push-darwin-arm64-image]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.14.13
      - name: Check out code
        uses: actions/checkout@v2
        run: |
          make go.build.darwin_arm64.layotto
      - name: Publish Artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          name: layotto.darwin_arm64
          path: _output/darwin/arm64/layotto
          retention-days: 5
          if-no-files-found: error

  build-binary-linux-amd64-artifact:
    name:  "[Linux:AMD64] Build Artifact"
    needs: [build-push-linux-amd64-image]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.14.13
      - name: Check out code
        uses: actions/checkout@v2
        run: |
          make go.build.linux_amd64.layotto
      - name: Publish Artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          name: layotto.linux_amd64
          path: _output/linux/amd64/layotto
          retention-days: 5
          if-no-files-found: error

  build-binary-linux-arm64-artifact:
    name:  "[Linux:ARM64] Build Artifact"
    needs: [build-push-linux-arm64-image]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.14.13
      - name: Check out code
        uses: actions/checkout@v2
        run: |
          make go.build.linux_arm64.layotto
      - name: Publish Artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          name: layotto.linux_arm64
          path: _output/linux/arm64/layotto
          retention-days: 5
          if-no-files-found: error